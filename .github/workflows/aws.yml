name: Build and Deploy

on:
  push:
    branches:
      - main
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
      DOMAIN: pillihuamanlib
      DOMAIN_OWNER: 614520203803

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get CodeArtifact auth token
        id: codeartifact-token
        run: |
          TOKEN=$(aws codeartifact get-authorization-token \
            --domain $DOMAIN \
            --domain-owner $DOMAIN_OWNER \
            --query authorizationToken \
            --output text)
          echo "CODEARTIFACT_AUTH_TOKEN=$TOKEN" >> $GITHUB_ENV

      - name: Build, tag, and push Docker image to Amazon ECR
        env:
          ECR_REGISTRY: 614520203803.dkr.ecr.us-east-1.amazonaws.com
          ECR_REPOSITORY: support-app
          IMAGE_TAG: latest
        run: |
          docker build \
            --build-arg CODEARTIFACT_AUTH_TOKEN=$CODEARTIFACT_AUTH_TOKEN \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Prune Docker images
        run: docker image prune -f
