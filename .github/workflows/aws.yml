# =================================================================
# === WORKFLOW DE DESPLIEGUE MODERNO CON DOCKER Y ECR ===
# =================================================================
# Este workflow automatiza la construcci√≥n de una imagen de Docker,
# la sube al registro de contenedores de AWS (ECR) y le ordena
# a tu instancia EC2 que despliegue la nueva versi√≥n del servicio.
# =================================================================

name: Build, Push to ECR, and Deploy to EC2

on:
  push:
    branches:
      - master # O 'main', aseg√∫rate de que coincida con tu rama principal

# =================================================================
# === VARIABLES DE ENTORNO (LA √öNICA SECCI√ìN A MODIFICAR) ===
# =================================================================
env:
  # --- Configuraci√≥n de AWS (Apunta a tu NUEVA cuenta) ---
  AWS_REGION: us-east-1 # Aseg√∫rate de que esta sea la regi√≥n de tu EC2 y ECR
  
  # ‚ñº‚ñº‚ñº ¬°ACCI√ìN REQUERIDA! ‚ñº‚ñº‚ñº
  # Cambia estos dos valores para cada microservicio.
  ECR_REPOSITORY: support-app                # Para neuroIA: neuroia-app | Para support: support-app
  DOCKER_COMPOSE_SERVICE_NAME: support-app    # Para neuroIA: neuroia-app | Para support: support-app

  # --- Configuraci√≥n de EC2 (Usa los secretos de GitHub) ---
  EC2_HOST: ${{ secrets.EC2_HOST_IP }}
  EC2_USER: ec2-user

  # --- Configuraci√≥n de CodeArtifact (Apunta a tu NUEVA cuenta) ---
  CODEARTIFACT_DOMAIN: pillihuamanlib # O el nombre de tu nuevo dominio
  CODEARTIFACT_OWNER_ID: 614520203803 # ID de tu NUEVA cuenta

# =================================================================
# === TRABAJO DE DESPLIEGUE ===
# =================================================================
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      # Paso 1: Descargar el c√≥digo del repositorio
      - name: Checkout repository
        uses: actions/checkout@v3

      # Paso 2: Configurar las credenciales de AWS
      # Usa el usuario IAM 'github-actions-deployer' que creamos
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Paso 3: Iniciar sesi√≥n en el registro de contenedores de AWS (ECR)
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Paso 4: Construir y subir la imagen de Docker
      # Este paso ejecuta el 'Dockerfile' que creaste en tu proyecto.
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # 1. Obtiene el token de CodeArtifact para que Docker pueda descargar dependencias
          CODEARTIFACT_AUTH_TOKEN=$(aws codeartifact get-authorization-token \
            --domain ${{ env.CODEARTIFACT_DOMAIN }} \
            --domain-owner ${{ env.CODEARTIFACT_OWNER_ID }} \
            --query authorizationToken \
            --output text)

          echo "‚úÖ Token de CodeArtifact obtenido."

          # 2. Construye la imagen de Docker, pas√°ndole el token de forma segura
          docker build \
            --build-arg CODEARTIFACT_AUTH_TOKEN=$CODEARTIFACT_AUTH_TOKEN \
            -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest .
          
          echo "‚úÖ Imagen de Docker construida."

          # 3. Sube la imagen a ECR
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest
          
          echo "‚úÖ Imagen subida a ECR."

      # Paso 5: Desplegar la nueva imagen en la instancia EC2
      # Se conecta por SSH y le ordena a Docker Compose que actualice el servicio.
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }} # Usa la nueva llave .pem
          script: |
            echo "üöÄ Iniciando despliegue en el servidor..."
            # Navega a la carpeta donde est√° tu docker-compose.yml
            cd ~/mi-plataforma
            
            # Autentica Docker con ECR en la instancia EC2
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
            
            echo "‚úÖ Login de ECR en EC2 exitoso."
            
            # Descarga la √∫ltima versi√≥n de la imagen para el servicio espec√≠fico
            docker-compose pull ${{ env.DOCKER_COMPOSE_SERVICE_NAME }}
            
            # Reinicia solo ese servicio, sin afectar a los dem√°s
            docker-compose up -d --no-deps ${{ env.DOCKER_COMPOSE_SERVICE_NAME }}
            
            echo "‚úÖ Servicio ${{ env.DOCKER_COMPOSE_SERVICE_NAME }} actualizado y corriendo."
            
            # (Opcional) Limpia im√°genes antiguas que ya no est√°n en uso para ahorrar espacio
            docker image prune -f